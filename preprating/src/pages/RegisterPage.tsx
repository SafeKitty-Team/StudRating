import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import '../styles/authPages.css';

const RegisterPage: React.FC = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [passwordError, setPasswordError] = useState('');
    const { register, isLoading, error } = useAuth();
    const navigate = useNavigate();

    const validatePassword = () => {
        if (password.length < 8) {
            setPasswordError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤');
            return false;
        }
        if (password !== confirmPassword) {
            setPasswordError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
            return false;
        }
        setPasswordError('');
        return true;
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!validatePassword()) return;

        try {
            await register(email, password);
            navigate('/');
        } catch (err) {
            // –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        }
    };

    return (
        <div className="auth-page">
            <div className="auth-container">
                <h1 className="auth-title">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ü—Ä–µ–ø–†–µ–π—Ç–∏–Ω–≥</h1>
                <p className="auth-description">
                    –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º
                </p>

                {error && (
                    <div className="auth-error">
                        {error}
                    </div>
                )}

                <form className="auth-form" onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label htmlFor="email">Email</label>
                        <input
                            type="email"
                            id="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            required
                            className="form-input"
                            placeholder="user@example.com"
                        />
                    </div>

                    <div className="form-group">
                        <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
                        <div className="password-input-container">
                            <input
                                type={showPassword ? "text" : "password"}
                                id="password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                required
                                className="form-input"
                                placeholder="–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"
                            />
                            <button
                                type="button"
                                className="toggle-password-btn"
                                onClick={() => setShowPassword(!showPassword)}
                            >
                                {showPassword ? "üôà" : "üëÅÔ∏è"}
                            </button>
                        </div>
                    </div>

                    <div className="form-group">
                        <label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</label>
                        <input
                            type={showPassword ? "text" : "password"}
                            id="confirmPassword"
                            value={confirmPassword}
                            onChange={(e) => setConfirmPassword(e.target.value)}
                            required
                            className="form-input"
                            placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                        />
                        {passwordError && (
                            <div className="form-error">{passwordError}</div>
                        )}
                    </div>

                    <button
                        type="submit"
                        className="auth-submit-btn"
                        disabled={isLoading}
                    >
                        {isLoading ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..." : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
                    </button>
                </form>

                <div className="auth-links">
                    <div className="login-link-container">
                        <span>–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?</span>
                        <Link to="/login" className="login-link">
                            –í–æ–π—Ç–∏
                        </Link>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default RegisterPage;